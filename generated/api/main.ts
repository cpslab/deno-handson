/* eslint-disable */
/* generated by definy. Do not edit! */

import * as a from "https://raw.githubusercontent.com/narumincho/definy/f662850e6a0cb9ec7a69e60f424624c07dd417fa/deno-lib/definyRpc/core/coreType.ts";
import * as b from "https://raw.githubusercontent.com/narumincho/definy/f662850e6a0cb9ec7a69e60f424624c07dd417fa/deno-lib/definyRpc/core/request.ts";

/**
 * アカウント
 */
export type Account = {
  /**
   * アカウント名
   */
  readonly name: string;
  /**
   * 年齢
   */
  readonly age: number;
  readonly [Symbol.toStringTag]: "main.Account";
};

/**
 * アカウント
 */
export const Account: {
  /**
   * Account の型
   */
  readonly type: () => a.Type<Account>;
  /**
   * オブジェクトから作成する. 余計なフィールドがレスポンスに含まれてしまうのを防ぐ. 型のチェックはしない
   */
  readonly from: (
    a: globalThis.Omit<Account, typeof Symbol.toStringTag>
  ) => Account;
} = {
  type: (): a.Type<Account> =>
    a.Type.from({
      namespace: a.Namespace.local(["main"]),
      name: "Account",
      parameters: [],
    }),
  from: (
    obj: globalThis.Omit<Account, typeof Symbol.toStringTag>
  ): Account => ({
    name: obj.name,
    age: obj.age,
    [Symbol.toStringTag]: "main.Account",
  }),
};

/**
 * カスタムAPI Function
 */
export const hello = (parameter: {
  /**
   * api end point
   * @default new URL("http://8000-cpslab-denohandson-ahmh56yjxdk.ws-us79.gitpod.io")
   */
  readonly url?: globalThis.URL | undefined;
}): globalThis.Promise<a.Result<string, string>> =>
  b.requestQuery({
    url:
      parameter.url ??
      new globalThis.URL(
        "http://8000-cpslab-denohandson-ahmh56yjxdk.ws-us79.gitpod.io"
      ),
    namespace: a.FunctionNamespace.local(["main"]),
    name: "hello",
    inputType: a.Unit.type(),
    outputType: a.String.type(),
    input: undefined,
    typeMap: new Map([
      [
        "*coreType.String",
        a.DefinyRpcTypeInfo.from({
          namespace: a.Namespace.coreType,
          name: "String",
          description: "文字列",
          parameter: [],
          attribute: a.Maybe.nothing(),
          body: a.TypeBody.string,
        }),
      ],
      [
        "*coreType.Unit",
        a.DefinyRpcTypeInfo.from({
          namespace: a.Namespace.coreType,
          name: "Unit",
          description: "値が1つだけ",
          parameter: [],
          attribute: a.Maybe.nothing(),
          body: a.TypeBody.unit,
        }),
      ],
    ]),
  });

/**
 * カスタムAPI Function
 */
export const useCustomType = (parameter: {
  /**
   * api end point
   * @default new URL("http://8000-cpslab-denohandson-ahmh56yjxdk.ws-us79.gitpod.io")
   */
  readonly url?: globalThis.URL | undefined;
}): globalThis.Promise<a.Result<string, string>> =>
  b.requestQuery({
    url:
      parameter.url ??
      new globalThis.URL(
        "http://8000-cpslab-denohandson-ahmh56yjxdk.ws-us79.gitpod.io"
      ),
    namespace: a.FunctionNamespace.local(["main"]),
    name: "useCustomType",
    inputType: a.Unit.type(),
    outputType: a.String.type(),
    input: undefined,
    typeMap: new Map([
      [
        "*coreType.String",
        a.DefinyRpcTypeInfo.from({
          namespace: a.Namespace.coreType,
          name: "String",
          description: "文字列",
          parameter: [],
          attribute: a.Maybe.nothing(),
          body: a.TypeBody.string,
        }),
      ],
      [
        "*coreType.Unit",
        a.DefinyRpcTypeInfo.from({
          namespace: a.Namespace.coreType,
          name: "Unit",
          description: "値が1つだけ",
          parameter: [],
          attribute: a.Maybe.nothing(),
          body: a.TypeBody.unit,
        }),
      ],
    ]),
  });
